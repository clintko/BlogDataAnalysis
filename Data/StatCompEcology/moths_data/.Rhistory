# modifying colours and theme options
p <- p + scale_colour_manual(values = c("blue", "red"))
p <- p + labs(y = "Air temperature [°C]",
x = "Date and time",
colour = "Parameter")
p <- p + theme(legend.position = c(0.8, 0.9))
p
p <- ggplot(dat, aes(x = Idx))
p <- p + geom_line(aes(y = X, colour = "Temperature"))
# adding the relative humidity data, transformed to match roughly the range of the temperature
p <- p + geom_line(aes(y = Y*10, colour = "Humidity"))
# now adding the secondary axis, following the example in the help file ?scale_y_continuous
# and, very important, reverting the above transformation
p <- p + scale_y_continuous(
sec.axis = sec_axis(~./10, name = "Relative humidity [%]"))
# modifying colours and theme options
p <- p + scale_colour_manual(values = c("blue", "red"))
p <- p + labs(y = "Air temperature [°C]",
x = "Date and time",
colour = "Parameter")
p <- p + theme(legend.position = c(0.8, 0.9))
p
library(ggplot2) # must be version > 2.2.0
# Dummy data
dat <- data.frame(
Idx = 1:10,
#X = rnorm(10, mean=10, sd=1),
#Y = rnorm(10, mean=0,  sd=2)
X = 10,
Y = 1
) # end data.frame
# show first observations
head(dat)
p <- ggplot(dat, aes(x = Idx))
p <- p + geom_line(aes(y = X, colour = "Temperature"))
# adding the relative humidity data, transformed to match roughly the range of the temperature
p <- p + geom_line(aes(y = Y*10, colour = "Humidity"))
# now adding the secondary axis, following the example in the help file ?scale_y_continuous
# and, very important, reverting the above transformation
p <- p + scale_y_continuous(
sec.axis = sec_axis(~./10, name = "Relative humidity [%]"))
# modifying colours and theme options
p <- p + scale_colour_manual(values = c("blue", "red"))
p <- p + labs(y = "Air temperature [°C]",
x = "Date and time",
colour = "Parameter")
p <- p + theme(legend.position = c(0.8, 0.9))
p
p <- ggplot(dat, aes(x = Idx))
p <- p + geom_line(aes(y = X, colour = "Temperature"))
# adding the relative humidity data, transformed to match roughly the range of the temperature
p <- p + geom_line(aes(y = Y*9, colour = "Humidity"))
# now adding the secondary axis, following the example in the help file ?scale_y_continuous
# and, very important, reverting the above transformation
p <- p + scale_y_continuous(
sec.axis = sec_axis(~./9, name = "Relative humidity [%]"))
# modifying colours and theme options
p <- p + scale_colour_manual(values = c("blue", "red"))
p <- p + labs(y = "Air temperature [°C]",
x = "Date and time",
colour = "Parameter")
p <- p + theme(legend.position = c(0.8, 0.9))
p
library(ggplot2) # must be version > 2.2.0
# Dummy data
dat <- data.frame(
Idx = 1:10,
#X = rnorm(10, mean=10, sd=1),
#Y = rnorm(10, mean=0,  sd=2)
X = 10,
Y = 1.1
) # end data.frame
# show first observations
head(dat)
p <- ggplot(dat, aes(x = Idx))
p <- p + geom_line(aes(y = X, colour = "Temperature"))
# adding the relative humidity data, transformed to match roughly the range of the temperature
p <- p + geom_line(aes(y = Y*10, colour = "Humidity"))
# now adding the secondary axis, following the example in the help file ?scale_y_continuous
# and, very important, reverting the above transformation
p <- p + scale_y_continuous(
sec.axis = sec_axis(~./10, name = "Relative humidity [%]"))
# modifying colours and theme options
p <- p + scale_colour_manual(values = c("blue", "red"))
p <- p + labs(y = "Air temperature [°C]",
x = "Date and time",
colour = "Parameter")
p <- p + theme(legend.position = c(0.8, 0.9))
p
p <- ggplot(dat, aes(x = Idx))
p <- p + geom_line(aes(y = X, colour = "Temperature"))
p <- p + xlim(c(5, 15))
# adding the relative humidity data, transformed to match roughly the range of the temperature
p <- p + geom_line(aes(y = Y*10, colour = "Humidity"))
# now adding the secondary axis, following the example in the help file ?scale_y_continuous
# and, very important, reverting the above transformation
p <- p + scale_y_continuous(
sec.axis = sec_axis(~./10, name = "Relative humidity [%]"))
# modifying colours and theme options
p <- p + scale_colour_manual(values = c("blue", "red"))
p <- p + labs(y = "Air temperature [°C]",
x = "Date and time",
colour = "Parameter")
p <- p + theme(legend.position = c(0.8, 0.9))
p
p <- ggplot(dat, aes(x = Idx))
p <- p + geom_line(aes(y = X, colour = "Temperature"))
p <- p + ylim(c(5, 15))
# adding the relative humidity data, transformed to match roughly the range of the temperature
p <- p + geom_line(aes(y = Y*10, colour = "Humidity"))
# now adding the secondary axis, following the example in the help file ?scale_y_continuous
# and, very important, reverting the above transformation
p <- p + scale_y_continuous(
sec.axis = sec_axis(~./10, name = "Relative humidity [%]"))
# modifying colours and theme options
p <- p + scale_colour_manual(values = c("blue", "red"))
p <- p + labs(y = "Air temperature [°C]",
x = "Date and time",
colour = "Parameter")
p <- p + theme(legend.position = c(0.8, 0.9))
p
p <- ggplot(dat, aes(x = Idx))
p <- p + geom_line(aes(y = X, colour = "Temperature"))
p <- p + ylim(5, 15)
# adding the relative humidity data, transformed to match roughly the range of the temperature
p <- p + geom_line(aes(y = Y*10, colour = "Humidity"))
# now adding the secondary axis, following the example in the help file ?scale_y_continuous
# and, very important, reverting the above transformation
p <- p + scale_y_continuous(
sec.axis = sec_axis(~./10, name = "Relative humidity [%]"))
# modifying colours and theme options
p <- p + scale_colour_manual(values = c("blue", "red"))
p <- p + labs(y = "Air temperature [°C]",
x = "Date and time",
colour = "Parameter")
p <- p + theme(legend.position = c(0.8, 0.9))
p
p <- ggplot(dat, aes(x = Idx))
p <- p + geom_line(aes(y = X, colour = "Temperature"))
p <- p + ylim(5, 15)
p
p <- p + geom_line(aes(y = Y*10, colour = "Humidity"))
p
p <- p + scale_y_continuous(
sec.axis = sec_axis(~./10, name = "Relative humidity [%]"))
p <- p + ylim(-2, 2)
p <- p + scale_colour_manual(values = c("blue", "red"))
p <- p + labs(y = "Air temperature [°C]",
x = "Date and time",
colour = "Parameter")
p <- p + theme(legend.position = c(0.8, 0.9))
p
p <- ggplot(dat, aes(x = Idx))
p <- p + geom_line(aes(y = X, colour = "Temperature"))
# adding the relative humidity data, transformed to match roughly the range of the temperature
p <- p + geom_line(aes(y = Y*10, colour = "Humidity"))
p
# now adding the secondary axis, following the example in the help file ?scale_y_continuous
# and, very important, reverting the above transformation
p <- p + scale_y_continuous(
sec.axis = sec_axis(~./10, name = "Relative humidity [%]"))
p <- p + ylim(5, 10)
# modifying colours and theme options
p <- p + scale_colour_manual(values = c("blue", "red"))
p <- p + labs(y = "Air temperature [°C]",
x = "Date and time",
colour = "Parameter")
p <- p + theme(legend.position = c(0.8, 0.9))
p
p <- ggplot(dat, aes(x = Idx))
p <- p + geom_line(aes(y = X, colour = "Temperature"))
# adding the relative humidity data, transformed to match roughly the range of the temperature
p <- p + geom_line(aes(y = Y*10, colour = "Humidity"))
p
p <- p + scale_y_continuous(
sec.axis = sec_axis(~./10, name = "Relative humidity [%]"))
p
p <- ggplot(dat, aes(x = Idx))
p <- p + geom_line(aes(y = X, colour = "Value X"))
# adding the relative humidity data, transformed to match roughly the range of the temperature
p <- p + geom_line(aes(y = Y*5, colour = "Value Y"))
p <- p + scale_y_continuous(
sec.axis = sec_axis(~./5, name = "Y"))
print(p)
p + ylim(-2, 2)
print(p)
p + ylim(5, 15)
p + scale_y_continuous(
sec.axis = sec_axis(~./5, name = "Y"))
p + scale_y_continuous(
sec.axis = sec_axis(~.-5, name = "Y"))
p <- ggplot(dat, aes(x = Idx))
p <- p + geom_line(aes(y = X, colour = "Value X"))
# adding the relative humidity data, transformed to match roughly the range of the temperature
p <- p + geom_line(aes(y = Y+5, colour = "Value Y"))
# now adding the secondary axis, following the example in the help file ?scale_y_continuous
# and, very important, reverting the above transformation
p <- p + scale_y_continuous(
sec.axis = sec_axis(~.-5, name = "Y"))
print(p)
p + ylim(5, 15)
p <- p + scale_y_continuous(
sec.axis = sec_axis(~.-5, name = "Y"))
library(ggplot2)
library(gtable)
library(grid)
grid.newpage()
# two plots
p1 <- ggplot(mtcars, aes(mpg, disp)) + geom_line(colour = "blue") + theme_bw()
p2 <- ggplot(mtcars, aes(mpg, drat)) + geom_line(colour = "red") + theme_bw() %+replace%
theme(panel.background = element_rect(fill = NA))
# extract gtable
g1 <- ggplot_gtable(ggplot_build(p1))
g2 <- ggplot_gtable(ggplot_build(p2))
# overlap the panel of 2nd plot on that of 1st plot
pp <- c(subset(g1$layout, name == "panel", se = t:r))
g <- gtable_add_grob(g1, g2$grobs[[which(g2$layout$name == "panel")]], pp$t,
pp$l, pp$b, pp$l)
# axis tweaks
ia <- which(g2$layout$name == "axis-l")
ga <- g2$grobs[[ia]]
ax <- ga$children[[2]]
ax$widths <- rev(ax$widths)
ax$grobs <- rev(ax$grobs)
ax$grobs[[1]]$x <- ax$grobs[[1]]$x - unit(1, "npc") + unit(0.15, "cm")
g <- gtable_add_cols(g, g2$widths[g2$layout[ia, ]$l], length(g$widths) - 1)
g <- gtable_add_grob(g, ax, pp$t, length(g$widths) - 1, pp$b)
# draw it
grid.draw(g)
p1 <- ggplot(mtcars, aes(mpg, disp)) + geom_line(colour = "blue") + theme_bw()
p2 <- ggplot(mtcars, aes(mpg, drat)) + geom_line(colour = "red") + theme_bw()
g1 <- ggplot_gtable(ggplot_build(p1))
g2 <- ggplot_gtable(ggplot_build(p2))
p1
p2
t:r
pp <- c(subset(g1$layout, name == "panel", se = t:r))
g <- gtable_add_grob(g1, g2$grobs[[which(g2$layout$name == "panel")]], pp$t,
pp$l, pp$b, pp$l)
# axis tweaks
ia <- which(g2$layout$name == "axis-l")
ga <- g2$grobs[[ia]]
ax <- ga$children[[2]]
ax$widths <- rev(ax$widths)
ax$grobs <- rev(ax$grobs)
ax$grobs[[1]]$x <- ax$grobs[[1]]$x - unit(1, "npc") + unit(0.15, "cm")
g <- gtable_add_cols(g, g2$widths[g2$layout[ia, ]$l], length(g$widths) - 1)
g <- gtable_add_grob(g, ax, pp$t, length(g$widths) - 1, pp$b)
# draw it
grid.draw(g)
library(ggplot2)
library(gtable)
library(grid)
grid.newpage()
# two plots
p1 <- ggplot(mtcars, aes(mpg, disp)) + geom_line(colour = "blue") + theme_bw()
p2 <- ggplot(mtcars, aes(mpg, drat)) + geom_line(colour = "red") + theme_bw()
#%+replace%
#    theme(panel.background = element_rect(fill = NA))
# extract gtable
g1 <- ggplot_gtable(ggplot_build(p1))
g2 <- ggplot_gtable(ggplot_build(p2))
# overlap the panel of 2nd plot on that of 1st plot
pp <- c(subset(g1$layout, name == "panel", se = t:r))
g <- gtable_add_grob(g1, g2$grobs[[which(g2$layout$name == "panel")]], pp$t,
pp$l, pp$b, pp$l)
# axis tweaks
ia <- which(g2$layout$name == "axis-l")
ga <- g2$grobs[[ia]]
ax <- ga$children[[2]]
ax$widths <- rev(ax$widths)
ax$grobs <- rev(ax$grobs)
ax$grobs[[1]]$x <- ax$grobs[[1]]$x - unit(1, "npc") + unit(0.15, "cm")
g <- gtable_add_cols(g, g2$widths[g2$layout[ia, ]$l], length(g$widths) - 1)
g <- gtable_add_grob(g, ax, pp$t, length(g$widths) - 1, pp$b)
# draw it
grid.draw(g)
library(ggplot2)
library(gtable)
library(grid)
grid.newpage()
# two plots
p1 <- ggplot(mtcars, aes(mpg, disp)) + geom_line(colour = "blue") + theme_bw()
p2 <- ggplot(mtcars, aes(mpg, drat)) + geom_line(colour = "red") + theme_bw()
%+replace%
theme(panel.background = element_rect(fill = NA))
# extract gtable
g1 <- ggplot_gtable(ggplot_build(p1))
g2 <- ggplot_gtable(ggplot_build(p2))
# overlap the panel of 2nd plot on that of 1st plot
pp <- c(subset(g1$layout, name == "panel", se = t:r))
g <- gtable_add_grob(g1, g2$grobs[[which(g2$layout$name == "panel")]], pp$t,
pp$l, pp$b, pp$l)
# axis tweaks
ia <- which(g2$layout$name == "axis-l")
ga <- g2$grobs[[ia]]
ax <- ga$children[[2]]
ax$widths <- rev(ax$widths)
ax$grobs <- rev(ax$grobs)
ax$grobs[[1]]$x <- ax$grobs[[1]]$x - unit(1, "npc") + unit(0.15, "cm")
g <- gtable_add_cols(g, g2$widths[g2$layout[ia, ]$l], length(g$widths) - 1)
g <- gtable_add_grob(g, ax, pp$t, length(g$widths) - 1, pp$b)
# draw it
grid.draw(g)
g1
subset(g1$layout, name == "panel", se = t:r)
subset(g1$layout, name == "panel")
#' When plotting multiple data series that share a common x axis but different y axes,
#' we can just plot each graph separately. This suffers from the drawback that the shared axis will typically
#' not align across graphs due to different plot margins.
#' One easy solution is to reshape2::melt() the data and use ggplot2's facet_grid() mapping. However, there is
#' no way to label individual y axes.
#' facet_grid() and facet_wrap() were designed to plot small multiples, where both x- and y-axis ranges are
#' shared acros all plots in the facetting. While the facet_ calls allow us to use different scales with
#' the \code{scales = "free"} argument, they should not be used this way.
#' A more robust approach is to the grid package grid.draw(), rbind() and ggplotGrob() to create a grid of
#' individual plots where the plot axes are properly aligned within the grid.
#' Thanks to https://rpubs.com/MarkusLoew/13295 for the grid.arrange() idea.
library(ggplot2)
library(grid)
library(dplyr)
#' Create some data to play with. Two time series with the same timestamp.
df <- data.frame(DateTime = ymd("2010-07-01") + c(0:8760) * hours(2), series1 = rnorm(8761), series2 = rnorm(8761, 100))
#' Create the two plots.
plot1 <- df %>%
select(DateTime, series1) %>%
na.omit() %>%
ggplot() +
geom_point(aes(x = DateTime, y = series1), size = 0.5, alpha = 0.75) +
ylab("Red dots / m") +
theme_minimal() +
theme(axis.title.x = element_blank())
plot2 <- df %>%
select(DateTime, series2) %>%
na.omit() %>%
ggplot() +
geom_point(aes(x = DateTime, y = series2), size = 0.5, alpha = 0.75) +
ylab("Blue drops / L") +
theme_minimal() +
theme(axis.title.x = element_blank())
grid.newpage()
grid.draw(rbind(ggplotGrob(plot1), ggplotGrob(plot2), size = "last"))
df <- data.frame(DateTime = ymd("2010-07-01") + c(0:8760) * hours(2), series1 = rnorm(8761), series2 = rnorm(8761, 100))
library(ggplot2)
library(grid)
library(dplyr)
ymd
library(lubridate)
install.packages("lubridate")
#' When plotting multiple data series that share a common x axis but different y axes,
#' we can just plot each graph separately. This suffers from the drawback that the shared axis will typically
#' not align across graphs due to different plot margins.
#' One easy solution is to reshape2::melt() the data and use ggplot2's facet_grid() mapping. However, there is
#' no way to label individual y axes.
#' facet_grid() and facet_wrap() were designed to plot small multiples, where both x- and y-axis ranges are
#' shared acros all plots in the facetting. While the facet_ calls allow us to use different scales with
#' the \code{scales = "free"} argument, they should not be used this way.
#' A more robust approach is to the grid package grid.draw(), rbind() and ggplotGrob() to create a grid of
#' individual plots where the plot axes are properly aligned within the grid.
#' Thanks to https://rpubs.com/MarkusLoew/13295 for the grid.arrange() idea.
library(ggplot2)
library(grid)
library(dplyr)
library(lubridate)
#install.packages("lubridate")
#' Create some data to play with. Two time series with the same timestamp.
df <- data.frame(DateTime = ymd("2010-07-01") + c(0:8760) * hours(2), series1 = rnorm(8761), series2 = rnorm(8761, 100))
#' Create the two plots.
plot1 <- df %>%
select(DateTime, series1) %>%
na.omit() %>%
ggplot() +
geom_point(aes(x = DateTime, y = series1), size = 0.5, alpha = 0.75) +
ylab("Red dots / m") +
theme_minimal() +
theme(axis.title.x = element_blank())
plot2 <- df %>%
select(DateTime, series2) %>%
na.omit() %>%
ggplot() +
geom_point(aes(x = DateTime, y = series2), size = 0.5, alpha = 0.75) +
ylab("Blue drops / L") +
theme_minimal() +
theme(axis.title.x = element_blank())
grid.newpage()
grid.draw(rbind(ggplotGrob(plot1), ggplotGrob(plot2), size = "last"))
p1 <- ggplot(mtcars, aes(mpg, disp)) + geom_line(colour = "blue") + theme_bw()
p1
p2 <- ggplot(mtcars, aes(mpg, drat)) + geom_line(colour = "red") + theme_bw()
p2
p2 <- p2 + corrd_flip()
p2 <- p2 + coord_flip()
p2
grid.newpage()
grid.draw(rbind(ggplotGrob(p1), ggplotGrob(p2))
)
p1 <- ggplot(mtcars, aes(mpg, disp)) + geom_line(colour = "blue") + theme_bw()
p2 <- ggplot(mtcars, aes(mpg, drat)) + geom_line(colour = "red") + theme_bw()
grid.newpage()
grid.draw(rbind(ggplotGrob(p1), ggplotGrob(p2)))
grid.draw(rbind(ggplotGrob(p1), ggplotGrob(p2)), size = "last")
grid.draw(rbind(ggplotGrob(p1), ggplotGrob(p2), size = "last"))
p2 + scale_y_reverse()
p2 + scale_y_continuous(sec.axis = dup_axis())
p2 + scale_y_continuous(position = "right")
grid.draw(rbind(ggplotGrob(p1), ggplotGrob(p2), size = "last"))
p22 <- p2 + scale_y_continuous(position = "right")
grid.newpage()
grid.draw(rbind(ggplotGrob(p1), ggplotGrob(p22), size = "last"))
library(knitr)
kable(data.frame(x=rnorm(5),y=rnorm(5)))
A <- c(1,5,6,7,9)
B <- c(10,56,64,86,98)
C <- c(2001,3333,5678,4345,5345)
D <- c(13446,20336,24333,34345,42345)
L <- c(20,34,45,55,67)
M <- data.frame(L, A, B, C, D)
library(ggplot2)
x1 <- ggplot(M, aes(L, A,xmin=10,ymin=0)) + geom_point() + stat_smooth(method='lm')
x2 <- ggplot(M, aes(L, B,xmin=10,ymin=0)) + geom_point() + stat_smooth(method='lm')
x3 <- ggplot(M, aes(L, C,xmin=10,ymin=0)) + geom_point() + stat_smooth(method='lm')
x4 <- ggplot(M, aes(L, D,xmin=10,ymin=0)) + geom_point() + stat_smooth(method='lm')
grid.arrange(x1,x2,x3,x4,nrow=2)
x4
install.packages("gtable")
install.packages("gtable")
install.packages("gtable")
install.packages("gtable")
install.packages("gtable")
install.packages("gtable")
library(gtable)
plots <- list(a,b,c,d)
grobs = lapply(plots, ggplotGrob)
grid.arrange(x1,x2,x3,x4,nrow=2)
library(gtable)
A <- c(1,5,6,7,9)
B <- c(10,56,64,86,98)
C <- c(2001,3333,5678,4345,5345)
D <- c(13446,20336,24333,34345,42345)
L <- c(20,34,45,55,67)
M <- data.frame(L, A, B, C, D)
library(ggplot2)
x1 <- ggplot(M, aes(L, A,xmin=10,ymin=0)) + geom_point() + stat_smooth(method='lm')
x2 <- ggplot(M, aes(L, B,xmin=10,ymin=0)) + geom_point() + stat_smooth(method='lm')
x3 <- ggplot(M, aes(L, C,xmin=10,ymin=0)) + geom_point() + stat_smooth(method='lm')
x4 <- ggplot(M, aes(L, D,xmin=10,ymin=0)) + geom_point() + stat_smooth(method='lm')
grid.arrange(x1,x2,x3,x4,nrow=2)
library(gridExtra)
grid.arrange(x1,x2,x3,x4,nrow=2)
grid.arrange(x1,x2,x3,x4,nrow=2, width=2)
grid.arrange(x1,x2,x3,x4,nrow=2, width=(2,2,2,2))
grid.arrange(x1,x2,x3,x4,nrow=2, width=c(2,2,2,2))
grid.arrange(x1,x2,x3,x4,nrow=2, widths=c(2,2,2,2))
library(grid)
grid.draw
x <- cbind(
rbind(ggplotGrob(x1), ggplotGrob(x2)),
rbind(ggplotGrob(x3), ggplotGrob(x4)))
grid.draw(x, size = "last"))
grid.draw(x, size = "last")
grid.draw(x)
x1 <- ggplot(M, aes(L, A,xmin=10,ymin=0)) + geom_point() + stat_smooth(method='lm')
x2 <- ggplot(M, aes(L, B,xmin=0,ymin=0)) + geom_point() + stat_smooth(method='lm')
x3 <- ggplot(M, aes(L, C,xmin=10,ymin=0)) + geom_point() + stat_smooth(method='lm')
x4 <- ggplot(M, aes(L, D,xmin=0,ymin=0)) + geom_point() + stat_smooth(method='lm')
x <- cbind(
rbind(ggplotGrob(x1), ggplotGrob(x2)),
rbind(ggplotGrob(x3), ggplotGrob(x4)))
grid.draw(x)
x1 <- ggplot(M, aes(L, A,xmin=10,ymin=0)) + geom_point() + stat_smooth(method='lm')
x2 <- ggplot(M, aes(L, B,xmin=10,ymin=0)) + geom_point() + stat_smooth(method='lm')
x3 <- ggplot(M, aes(L, C,xmin=0,ymin=0)) + geom_point() + stat_smooth(method='lm')
x4 <- ggplot(M, aes(L, D,xmin=0,ymin=0)) + geom_point() + stat_smooth(method='lm')
x <- cbind(
rbind(ggplotGrob(x1), ggplotGrob(x2)),
rbind(ggplotGrob(x3), ggplotGrob(x4)))
library(grid)
grid.draw(x)
setwd("C:\\Users\\clint\\Documents\\GitHub\\BlogDataAnalysis\\Data\\StatCompEcology\\moths_data")
##RDA
library(vegan)
moths = read.csv('moths.csv',header=T)
hab.full = read.csv('moths.full.csv',header=T)
hab.plot = read.csv('moths.plot.csv',header=T)
hab.patch = read.csv('moths.patch.csv',header=T)
hab.land = read.csv('moths.land.csv',header=T)
hab.space = read.csv('moths.space.csv',header=T)
y = moths[,-1]       #exclude site id
x.full = hab.full[,-1]
x.plot = hab.plot[,-1]
x.patch = hab.patch[,-1]
x.land = hab.land[,-1]
x.space = hab.space[,-1]
y.log = log(y+1)    #log-transform y
y.chord = data.frame(matrix(0,nrow(y.log),ncol(y.log)))    #row normalization
rsum = apply(y.log,1,sum)
for(i in 1:nrow(y.log)){
y.chord[i,] = y.log[i,]/rsum[i]
}
#Determine an appropriate species response model
y.dca = decorana(y.log)
y.dca
plot(y.dca,type='text')
View(x.plot)
data(dune)
View(dune)
data(dune.env)
View(dune.env)
mdun <- cca(dune ~ Management + A1, dune.env)
mdun
View(dune.env)
?cca

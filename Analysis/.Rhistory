Overlap = res$Overlap
Union   = res$Union
Jaccard = res$Jaccard
Odds    = signif(res$Odds, 5)
Pval    = res$Pval
return(c(Size01, Size02,
Overlap, Union, Jaccard,
Odds, Pval))})))
# column names
colnames(res) <- c(
"List01", "List02",
"Size01", "Size02",
"Overlap", "Union", "Jaccard",
"Odds", "Pval")
return(res)
} # end func enrich1List
enrich1List(lst, setAll = setAll)
enrich1List <- function(lst, setAll=NULL){
# lst
###########################
if (is.null(setAll)){
setAll  <- Reduce(union, lst)
} # end if
#===========================
#
idxPair <- t(combn(names(lst), 2))
#===========================
res <- data.frame(
idxPair,
t(apply(idxPair, 1, function(idx){
# get two sets
set01 = lst[[idx[1]]]
set02 = lst[[idx[2]]]
res <- enrichTest01(set01, set02, setAll)
# Assign values
Size01  = res$Size01
Size02  = res$Size02
Overlap = res$Overlap
Union   = res$Union
Jaccard = signif(res$Jaccard, 5)
Odds    = signif(res$Odds,    5)
Pval    = signif(res$Pval,    5)
return(c(Size01, Size02,
Overlap, Union, Jaccard,
Odds, Pval))})))
# column names
colnames(res) <- c(
"List01", "List02",
"Size01", "Size02",
"Overlap", "Union", "Jaccard",
"Odds", "Pval")
return(res)
} # end func enrich1List
enrich1List(lst, setAll = setAll)
sample(1:100, 1)
sample(1:100, 1)
sample(1:100, 1)
sample(1:100, 1)
sample(1:100, 1)
sample(1:100, 1)
sample(1:100, 1)
sample(1:100, 1)
sample(1:100, 1)
sample(1:100, 1)
sample(1:100, 1)
replicate(10, sample(setAll, sample(1:length(setAll), 1)))
enrich1List <- function(lst, setAll=NULL){
# lst
###########################
if (is.null(setAll)){
setAll  <- Reduce(union, lst)
} # end if
#===========================
#
idxPair <- t(combn(names(lst), 2))
#===========================
res <- data.frame(
idxPair,
t(apply(idxPair, 1, function(idx){
# get two sets
set01 = lst[[idx[1]]]
set02 = lst[[idx[2]]]
res <- enrichTest01(
set01, set02, setAll,
setName01=idx[1],
setName02=idx[2])
# Assign values
Size01  = res$Size01
Size02  = res$Size02
Overlap = res$Overlap
Union   = res$Union
Jaccard = signif(res$Jaccard, 5)
Odds    = signif(res$Odds,    5)
Pval    = signif(res$Pval,    5)
return(c(Size01, Size02,
Overlap, Union, Jaccard,
Odds, Pval))})))
# column names
colnames(res) <- c(
"List01", "List02",
"Size01", "Size02",
"Overlap", "Union", "Jaccard",
"Odds", "Pval")
return(res)
} # end func enrich1List
lst1 <- replicate(10, sample(setAll, sample(1:length(setAll), 1)))
lst1 <- replicate(10, sample(setAll, sample(1:length(setAll), 1)))
names(lst1) <- paste("A", 1:10)
lst2 <- replicate(10, sample(setAll, sample(1:length(setAll), 1)))
names(lst2) <- paste("B", 1:10)
lst1
lst2 <- replicate(10, sample(setAll, sample(1:length(setAll), 1)))
names(lst2) <- paste("B", 1:10)
enrich2List <- function(lst1, lst2, setAll=NULL){
# lst1 : testing sets   (ex: high expressed gene sets in each samples)
# lst2 : reference sets (ex: GO terms)
###########################
#
if (is.null(setAll)){
setAll  <- Reduce(union, lst2)
} # end if
#===========================
#
idxPair <- expand.grid(names(lst1), names(lst2))
#===========================
res <- data.frame(
idxPair,
t(apply(idxPair, 1, function(idx){
# get two sets
set01 = lst[[idx[1]]]
set02 = lst[[idx[2]]]
res <- enrichTest01(
set01, set02, setAll,
setName01=idx[1],
setName02=idx[2])
# Assign values
Size01  = res$Size01
Size02  = res$Size02
Overlap = res$Overlap
Union   = res$Union
Jaccard = signif(res$Jaccard, 5)
Odds    = signif(res$Odds,    5)
Pval    = signif(res$Pval,    5)
return(c(Size01, Size02,
Overlap, Union, Jaccard,
Odds, Pval))})))
# column names
colnames(res) <- c(
"List01", "List02",
"Size01", "Size02",
"Overlap", "Union", "Jaccard",
"Odds", "Pval")
return(res)
} # end func enrich2List
enrich1List(lst1, lst2, setAll = setAll)
enrich2List(lst1, lst2, setAll = setAll)
lst1
lst2
lst2 <- replicate(5, sample(setAll, sample(1:length(setAll), 1)))
names(lst2) <- paste("B", 1:5)
enrich1List(lst, setAll = setAll)
enrich1List(lst1, setAll = setAll)
enrich2List(lst1, lst2, setAll = setAll)
enrichTest01 <- function(set01, set02, setAll, setName01="Set01", setName02="Set02"){
belongSet01 <- ifelse(setAll %in% set01, 1, 2)
belongSet02 <- ifelse(setAll %in% set02, 1, 2)
tab <- table(belongSet01, belongSet02)
print("Table")
print(tab)
dimnames(tab)[["belongSet01"]] <- c(1,0)
dimnames(tab)[["belongSet02"]] <- c(1,0)
names(dimnames(tab)) <- c(setName01, setName02)
res <- list()
# Hypergeometric Test
res$Table <- tab
res$Pval  <- 1-phyper(
tab[1,1],     sum(tab[1,]),
sum(tab[2,]), sum(tab[,1]))
res$Odds  <- tab[1,1] * tab[2,2] / tab[1,2] / tab[2,1]
# Descriptive Value
res$Size01  <- length(set01)
res$Size02  <- length(set02)
res$Overlap <- length(intersect(set01, set02))
res$Union   <- length(union(set01, set02))
res$Jaccard <- res$Overlap / res$Union
# return the result
return(res)
} # end func enrichTest
enrich2List(lst1, lst2, setAll = setAll)
x <- sample(setAll, 10)
x
factor(x)
factor(x, levels=setAll)
table(x)
y <- factor(x, levels=setAll)
table(y)
enrichTest01 <- function(set01, set02, setAll, setName01="Set01", setName02="Set02"){
belongSet01 <- factor(ifelse(setAll %in% set01, 1, 0), levels=c(1,0))
belongSet02 <- factor(ifelse(setAll %in% set02, 1, 0), levels=c(1,0))
tab <- table(belongSet01, belongSet02)
print("Table")
print(tab)
#dimnames(tab)[["belongSet01"]] <- c(1,0)
#dimnames(tab)[["belongSet02"]] <- c(1,0)
names(dimnames(tab)) <- c(setName01, setName02)
res <- list()
# Hypergeometric Test
res$Table <- tab
res$Pval  <- 1-phyper(
tab[1,1],     sum(tab[1,]),
sum(tab[2,]), sum(tab[,1]))
res$Odds  <- tab[1,1] * tab[2,2] / tab[1,2] / tab[2,1]
# Descriptive Value
res$Size01  <- length(set01)
res$Size02  <- length(set02)
res$Overlap <- length(intersect(set01, set02))
res$Union   <- length(union(set01, set02))
res$Jaccard <- res$Overlap / res$Union
# return the result
return(res)
} # end func enrichTest
enrichTest02(set01, set02, setAll, "x", "y")
enrichTest01(set01, set02, setAll, "x", "y")
echo
enrichTest01 <- function(set01, set02, setAll, setName01="Set01", setName02="Set02", echo=FALSE){
belongSet01 <- factor(ifelse(setAll %in% set01, 1, 0), levels=c(1,0))
belongSet02 <- factor(ifelse(setAll %in% set02, 1, 0), levels=c(1,0))
tab <- table(belongSet01, belongSet02)
if(echo){
print("Table")
print(tab)
} # end if
#dimnames(tab)[["belongSet01"]] <- c(1,0)
#dimnames(tab)[["belongSet02"]] <- c(1,0)
names(dimnames(tab)) <- c(setName01, setName02)
res <- list()
# Hypergeometric Test
res$Table <- tab
res$Pval  <- 1-phyper(
tab[1,1],     sum(tab[1,]),
sum(tab[2,]), sum(tab[,1]))
res$Odds  <- tab[1,1] * tab[2,2] / tab[1,2] / tab[2,1]
# Descriptive Value
res$Size01  <- length(set01)
res$Size02  <- length(set02)
res$Overlap <- length(intersect(set01, set02))
res$Union   <- length(union(set01, set02))
res$Jaccard <- res$Overlap / res$Union
# return the result
return(res)
} # end func enrichTest
enrich2List(lst1, lst2, setAll = setAll)
lst1
setAll <- letters
lst1 <- replicate(10, sample(setAll, sample(1:length(setAll), 1)))
names(lst1) <- paste("A", 1:10)
lst2 <- replicate(5, sample(setAll, sample(1:length(setAll), 1)))
names(lst2) <- paste("B", 1:5)
lst1
lst2
enrich2List(lst1, lst2, setAll = setAll)
lst1[[1]]
lst2[[1]]
enrich2List <- function(lst1, lst2, setAll=NULL){
# lst1 : testing sets   (ex: high expressed gene sets in each samples)
# lst2 : reference sets (ex: GO terms)
###########################
#
if (is.null(setAll)){
setAll  <- Reduce(union, lst2)
} # end if
#===========================
#
idxPair <- expand.grid(names(lst1), names(lst2))
#===========================
res <- data.frame(
idxPair,
t(apply(idxPair, 1, function(idx){
# get two sets
set01 = lst1[[idx[1]]]
set02 = lst2[[idx[2]]]
res <- enrichTest01(
set01, set02, setAll,
setName01=idx[1],
setName02=idx[2])
# Assign values
Size01  = res$Size01
Size02  = res$Size02
Overlap = res$Overlap
Union   = res$Union
Jaccard = signif(res$Jaccard, 5)
Odds    = signif(res$Odds,    5)
Pval    = signif(res$Pval,    5)
return(c(Size01, Size02,
Overlap, Union, Jaccard,
Odds, Pval))})))
# column names
colnames(res) <- c(
"List01", "List02",
"Size01", "Size02",
"Overlap", "Union", "Jaccard",
"Odds", "Pval")
return(res)
} # end func enrich2List
enrich1List(lst1, setAll = setAll)
enrich2List(lst1, lst2, setAll = setAll)
enrichTest(lst1[[1]], lst2[[1]], setAll=setAll)
lst1[[1]], lst2[[1]]
lst1[[1]]
lst2[[1]]
setAll
enrichTest(lst1[[1]], lst2[[1]], setAll=setAll)
enrichTest01(lst1[[1]], lst2[[1]], setAll=setAll)
replicate(1:10, sample(1:10))
replicate(1:10, sample(1:10))
setAll <- c(Letters, letters)
setAll <- c(Letters, letters)
dat <- data.frame(
Gene = setAll,
ps   = sample(1:10, length(setAll)))
dat
dat <- data.frame(
Gene = setAll,
ps   = sample(1:10, length(setAll)))
?fisher.test
enrichTest01 <- function(
set01, set02, setAll,
setName01="Set01", setName02="Set02",
method = "greater",
echo=FALSE){
belongSet01 <- factor(ifelse(setAll %in% set01, 1, 0), levels=c(1,0))
belongSet02 <- factor(ifelse(setAll %in% set02, 1, 0), levels=c(1,0))
tab <- table(belongSet01, belongSet02)
if(echo){
print("Table")
print(tab)
} # end if
#dimnames(tab)[["belongSet01"]] <- c(1,0)
#dimnames(tab)[["belongSet02"]] <- c(1,0)
names(dimnames(tab)) <- c(setName01, setName02)
# initialize
res <- list()
# Hypergeometric Test
### Contigency Table
res$Table <- tab
### Pvalue
prob <- phyper(
tab[1,1],     sum(tab[1,]),
sum(tab[2,]), sum(tab[,1]))
if(method=="less"){
res$Pval <- prob
} else {
res$Pval <- 1-prob
} # end if
res$Odds  <- tab[1,1] * tab[2,2] / tab[1,2] / tab[2,1]
# Descriptive Value
res$Size01  <- length(set01)
res$Size02  <- length(set02)
res$Overlap <- length(intersect(set01, set02))
res$Union   <- length(union(set01, set02))
res$Jaccard <- res$Overlap / res$Union
# return the result
return(res)
} # end func enrichTest
enrichTest01(set01, set02, setAll, "x", "y")
enrichTest01(set01, set02, setAll, "x", "y", method="less")
enrichTest01(set01, set02, setAll, "x", "y")
enrichTest01 <- function(
set01, set02, setAll,
setName01="Set01", setName02="Set02",
echo=FALSE){
belongSet01 <- factor(ifelse(setAll %in% set01, 1, 0), levels=c(1,0))
belongSet02 <- factor(ifelse(setAll %in% set02, 1, 0), levels=c(1,0))
tab <- table(belongSet01, belongSet02)
if(echo){
print("Table")
print(tab)
} # end if
#dimnames(tab)[["belongSet01"]] <- c(1,0)
#dimnames(tab)[["belongSet02"]] <- c(1,0)
names(dimnames(tab)) <- c(setName01, setName02)
# initialize
res <- list()
# Hypergeometric Test
### Contigency Table
res$Table <- tab
### Pvalue
prob <- phyper(
tab[1,1],     sum(tab[1,]),
sum(tab[2,]), sum(tab[,1]))
res$PvalGreater <- 1-prob
res$PvalLess    <- prob
res$Odds  <- tab[1,1] * tab[2,2] / tab[1,2] / tab[2,1]
# Descriptive Value
res$Size01  <- length(set01)
res$Size02  <- length(set02)
res$Overlap <- length(intersect(set01, set02))
res$Union   <- length(union(set01, set02))
res$Jaccard <- res$Overlap / res$Union
# return the result
return(res)
} # end func enrichTest
enrichTest01(set01, set02, setAll, "x", "y")
enrich2List <- function(lst1, lst2, setAll=NULL){
# lst1 : testing sets   (ex: high expressed gene sets in each samples)
# lst2 : reference sets (ex: GO terms)
###########################
#
if (is.null(setAll)){
setAll  <- Reduce(union, lst2)
} # end if
#===========================
#
idxPair <- expand.grid(names(lst1), names(lst2))
#===========================
res <- data.frame(
idxPair,
t(apply(idxPair, 1, function(idx){
# get two sets
set01 = lst1[[idx[1]]]
set02 = lst2[[idx[2]]]
res <- enrichTest01(
set01, set02, setAll,
setName01=idx[1],
setName02=idx[2])
# Assign values
Size01  = res$Size01
Size02  = res$Size02
Overlap = res$Overlap
Union   = res$Union
Jaccard = signif(res$Jaccard, 5)
Odds    = signif(res$Odds,    5)
PvalGreater = signif(res$PvalGreater, 5)
PvalLess    = signif(res$PvalLess,    5)
return(c(Size01, Size02,
Overlap, Union, Jaccard,
Odds, PvalGreater, PvalLess))})))
# column names
colnames(res) <- c(
"List01", "List02",
"Size01", "Size02",
"Overlap", "Union", "Jaccard",
"Odds", "PvalGreater", "PvalLess")
return(res)
} # end func enrich2List
enrich1List <- function(lst, setAll=NULL){
# lst
###########################
if (is.null(setAll)){
setAll  <- Reduce(union, lst)
} # end if
#===========================
#
idxPair <- t(combn(names(lst), 2))
#===========================
res <- data.frame(
idxPair,
t(apply(idxPair, 1, function(idx){
# get two sets
set01 = lst[[idx[1]]]
set02 = lst[[idx[2]]]
res <- enrichTest01(
set01, set02, setAll,
setName01=idx[1],
setName02=idx[2])
# Assign values
Size01  = res$Size01
Size02  = res$Size02
Overlap = res$Overlap
Union   = res$Union
Jaccard = signif(res$Jaccard, 5)
Odds    = signif(res$Odds,    5)
PvalGreater = signif(res$PvalGreater, 5)
PvalLess    = signif(res$PvalLess,    5)
return(c(Size01, Size02,
Overlap, Union, Jaccard,
Odds, PvalGreater, PvalLess))})))
# column names
colnames(res) <- c(
"List01", "List02",
"Size01", "Size02",
"Overlap", "Union", "Jaccard",
"Odds", "PvalGreater", "PvalLess")
return(res)
} # end func enrich1List
enrich1List(lst1, setAll = setAll)
library(readxl)
# set work space
workdir <- "C:\\Users\\clint\\Documents\\GitHub\\BlogDataAnalysis"
setwd(file.path(workdir, "Analysis"))
# path for data
filePathData <- file.path(
workdir,
"Data\\StatCompEcology\\Copepod")
source('~/.active-rstudio-document', echo=TRUE)
boxplot(jKnife_CpodMean)
boxplot(jKnife_CpodMean$Val)
kable
boxplot(
cpod$Val
jKnife_CpodMean$Val,
bStrap_CpodMean$Val,
fish$Val,
jKnife_FishMean$Val,
bStrap_FishMean$Val)
boxplot(
cpod$Val,
jKnife_CpodMean$Val,
bStrap_CpodMean$Val,
fish$Val,
jKnife_FishMean$Val,
bStrap_FishMean$Val)

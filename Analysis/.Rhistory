7 * (x1 + x2 + x3)
7 * (x1 + x2 + x3 + x4)
7 * (x1 + x2 + x3 + x4 + x5)
c(1,2,3)^3
?rnorn
?rnorm
pnorm(0)
round(seq(0,5, by=0.01))
table(round(seq(0,5, by=0.01)))
dnorm(0)
pnorm(0)
qnorm(0.025)
qnorm(0.975)
T & F
T&&F
createCDF <- function(val){
# sort the value
val <- sort(val)
# create empirical CDF
cdf <- function(x){
prop <- mean(val <= x)
return(prop)
} # end inner func cdf
# create inverse of empirical CDF
cdfInv <- function(prop){
idx <- round(length(val) * prop)
x <- val[idx]
return(x)
} # end inner func cdfInv
f <- list()
f$Cdf <- CDF
f$CdfInv <- cdfInv
return(f)
}
getAcceleration <- function(val, mu){
valNew = val - mu
# numerator
x = valNew^3
x = sum(x)
# denominator
y = valNew^2
y = sum(y)
y = 6 * y^(3/2)
# return result
return(x/y)
} # end func getAcceleration
getBStrapCI <- function(
val, theta, alpha=0.5,
acc=FALSE, jKnife=NULL){
f  <- createCDF(val)
z0  <-  qnorm(f$cdf(theta))
zA2 <- -qnorm(alpha/2)
if (!acc && !is.null(jKnife)) {
a   <- getAcceleration(jKnife$val, jKnife$MU)
z2  <- z0 + (z0 + zA2) / (1 - a*(z0 + zA2))
z1  <- z0 + (z0 - zA2) / (1 - a*(z0 - zA2))
}{
z2  <- 2 * z0 + zA2
z1  <- 2 * z0 - zA2
} # end ifelse
CI <- list()
CI$upper <- f$CdfInv(pnorm(z2))
CI$lower <- f$CdfInv(pnorm(z1))
return(CI)
} # end func getCI
createCDF <- function(val){
# sort the value
val <- sort(val)
# create empirical CDF
cdf <- function(x){
prop <- mean(val <= x)
return(prop)
} # end inner func cdf
# create inverse of empirical CDF
cdfInv <- function(prop){
idx <- round(length(val) * prop)
x <- val[idx]
return(x)
} # end inner func cdfInv
f <- list()
f$Cdf <- CDF
f$CdfInv <- cdfInv
return(f)
}
getAcceleration <- function(val, mu){
valNew = val - mu
# numerator
x = valNew^3
x = sum(x)
# denominator
y = valNew^2
y = sum(y)
y = 6 * y^(3/2)
# return result
return(x/y)
} # end func getAcceleration
getBStrapCI <- function(
val, theta, alpha=0.5,
acc=FALSE, jKnife=NULL){
f  <- createCDF(val)
z0  <-  qnorm(f$cdf(theta))
zA2 <- -qnorm(alpha/2)
if (!acc && !is.null(jKnife)) {
a   <- getAcceleration(jKnife$val, jKnife$MU)
z2  <- z0 + (z0 + zA2) / (1 - a*(z0 + zA2))
z1  <- z0 + (z0 - zA2) / (1 - a*(z0 - zA2))
}{
z2  <- 2 * z0 + zA2
z1  <- 2 * z0 - zA2
} # end ifelse
CI <- list()
CI$upper <- f$CdfInv(pnorm(z2))
CI$lower <- f$CdfInv(pnorm(z1))
return(CI)
} # end func getCI
getBStrapCI <- function(
val, theta, alpha=0.5,
acc=FALSE, jKnife=NULL){
f  <- createCDF(val)
z0  <-  qnorm(f$cdf(theta))
zA2 <- -qnorm(alpha/2)
if (!acc && !is.null(jKnife)) {
a   <- getAcceleration(jKnife$val, jKnife$MU)
z2  <- z0 + (z0 + zA2) / (1 - a*(z0 + zA2))
z1  <- z0 + (z0 - zA2) / (1 - a*(z0 - zA2))
}{
getBStrapCI <- function(
val, theta, alpha=0.5,
acc=FALSE, jKnife=NULL){
f  <- createCDF(val)
z0  <-  qnorm(f$cdf(theta))
zA2 <- -qnorm(alpha/2)
if (!acc && !is.null(jKnife)) {
a   <- getAcceleration(jKnife$val, jKnife$MU)
z2  <- z0 + (z0 + zA2) / (1 - a*(z0 + zA2))
z1  <- z0 + (z0 - zA2) / (1 - a*(z0 - zA2))
}else{
z2  <- 2 * z0 + zA2
z1  <- 2 * z0 - zA2
} # end ifelse
CI <- list()
CI$upper <- f$CdfInv(pnorm(z2))
CI$lower <- f$CdfInv(pnorm(z1))
return(CI)
} # end func getCI
myUnif <- function(n, a=0, b=1) {
# Continuous Uniform Distribution
# Default: R.V. ~ Uniform( [0,1] )
#====================================
x <- runif(n)      # R.V. ~~~ Uniform( [0,1] )
y <- x * (b-a) + a # Shift to Uniform( [a,b] )
return(y)
} # end func myUnif
mySample <- function(x){
# The function is based on
# return sample of x with replacement
#===========================================
# generate random numbers following uniform distribution
n <- length(x)
id <- myUnif(n, a=0, b=n)
# convert continuous value into discrete
id <- ceiling(id)
# remove 0 (very rare case, p(X=0) is zero
# for any continuous random variable)
id[id==0] <- 1
# return the result
return(x[id])
} # end mySample
myBootstrap <- function(x, f, N){UseMethod("myBootstrap")}
myBootstrap.data.frame <- function(x, f, N){
print("The input data is a data.frame...")
# get id, the idx of rows
id  <- seq_len(nrow(x))
# bootstrapping
print("Performing bootstrapping...")
val <- replicate(
N, f(x[mySample(id),])
) # end replicate
# summary statistics & return the result
print("...Finished")
res <- list()
res$Val <- val       # bootstrap pedvalue
res$MU  <- mean(val) # mean of bootstrapped value
res$SE  <- sd(val)   # standard error of mean
return(res)
} # end myJackknife.data.frame
myBootstrap.numeric <- function(x, f, N){
print("The input data is a data.frame...")
# get id, the idx of rows
id  <- seq_len(length(x))
# bootstrapping
print("Performing bootstrapping...")
val <- replicate(
N, f(x[mySample(id)])
) # end replicate
# summary statistics & return the result
print("...Finished")
res <- list()
res$Val <- val       # bootstrapped value
res$MU  <- mean(val) # mean of bootstrapped value
res$SE  <- sd(val)   # standard error of mean
return(res)
} # end myJackknife.numeric
myJackknife <- function(x, f){UseMethod("myJackknife")}
myJackknife.data.frame <- function(x, f){
print("Input is data frame")
n  <- nrow(x)
id <- 1:n
matID <- sapply(
id, function(x){id[-x]}
) # end sapply
colnames(matID) <- paste0("JK", id)
print("Performing Jackknife...")
val <- apply(
matID, 2,
function(idx){
f(
x[idx,]
)
}  # end apply func
) # end apply
print("...Finish")
res <- list()
res$MatID <- matID
res$Val   <- val       # Jackknife value
res$MU    <- mean(val) # mean of Jackknife value
# standard error of mean
res$SE    <- ((n-1) / n * sum((val-mean(val))^2))^0.5
return(res)
} # myJackknife.data.frame
myJackknife.numeric <- function(x, f){
print("Input is numeric vector")
n <- length(x)
id <- 1:n
matID <- sapply(
id, function(x){id[-x]}
) # end sapply
colnames(matID) <- paste0("JK", id)
print("Performing Jackknife...")
val <- apply(
matID, 2,
function(idx){
f(
x[idx]
)
}  # end apply func
) # end apply
print("...Finish")
res <- list()
res$MatID <- matID
res$Val   <- val
res$MU    <- mean(val)
res$SE    <- ((n-1) / n * sum((val-mean(val))^2))^0.5
return(res)
} # myJackknife.numeric
# score of LSAT
x <- c(576, 635, 558, 578, 666, 580, 555, 661, 651, 605, 653, 575, 545, 572, 594)
# score of GPA
y <- c(3.39, 3.30, 2.81, 3.03, 3.44, 3.07, 3.00, 3.42, 3.36, 3.13, 3.12, 2.74, 2.76, 2.88, 2.96)
cor(x,y)
thetaHat <- cor(x,y)
dat <- data.frame(X = x,Y=y)
dat <- data.frame(X = x,Y=y)
myFunc <- function(dat){
return(cor(dat$X,dat$Y))
} # end myFunc
myFunc(dat)
dat <- data.frame(X = x,Y=y)
myFunc <- function(dat){
return(cor(dat$X,dat$Y))
} # end myFunc
thetaHat <- myFunc(dat)
print(thetaHat)
resJKnife <- myJackknife(dat, f=myFunc)
resBStrap <- myBootstrap(dat, f=myFunc)
resBStrap <- myBootstrap(dat, f=myFunc, N=500)
getAcceleration(resJKnife$Val, resJKnife$Mu)
resJKnife
getAcceleration <- function(val, mu){
valNew = val - mu
# numerator
x = valNew^3
x = sum(x)
# denominator
y = valNew^2
y = sum(y)
y = 6 * y^(3/2)
# return result
return(x/y)
} # end func getAcceleration
getAcceleration <- function(val, mu){
valNew = val - mu
print(valNew)
# numerator
x = valNew^3
x = sum(x)
# denominator
y = valNew^2
y = sum(y)
y = 6 * y^(3/2)
# return result
return(x/y)
} # end func getAcceleration
getAcceleration(resJKnife$Val, resJKnife$Mu)
resJKnife
getAcceleration(resJKnife$Val, resJKnife$MU)
getBStrapCI(
val=resBStrap$Val,
theta=thetaHat,
alpha = 0.5)
createCDF <- function(val){
# sort the value
val <- sort(val)
# create empirical CDF
cdf <- function(x){
prop <- mean(val <= x)
return(prop)
} # end inner func cdf
# create inverse of empirical CDF
cdfInv <- function(prop){
idx <- round(length(val) * prop)
x <- val[idx]
return(x)
} # end inner func cdfInv
f <- list()
f$Cdf <- cdf
f$CdfInv <- cdfInv
return(f)
}
getBStrapCI(
val=resBStrap$Val,
theta=thetaHat,
alpha = 0.5)
createCDF(val)
val <- 1:10
createCDF(val)
f <- createCDF(val)
cdf <- f$Cdf(val)
cdf(val)
cdf
val <- 1:10
f <- createCDF(val)
sapply(val, f$Cdf)
thetaHat
f <- createCDF(resJKnife$Val)
getBStrapCI <- function(
val, theta, alpha=0.5,
jKnife=NULL){
f  <- createCDF(val)
z0  <-  qnorm(f$Cdf(theta))
zA2 <- -qnorm(alpha/2)
if (!is.null(jKnife)) {
a   <- getAcceleration(jKnife$val, jKnife$MU)
z2  <- z0 + (z0 + zA2) / (1 - a*(z0 + zA2))
z1  <- z0 + (z0 - zA2) / (1 - a*(z0 - zA2))
}else{
z2  <- 2 * z0 + zA2
z1  <- 2 * z0 - zA2
} # end ifelse
CI <- list()
CI$upper <- f$CdfInv(pnorm(z2))
CI$lower <- f$CdfInv(pnorm(z1))
return(CI)
} # end func getCI
getBStrapCI(
val=resBStrap$Val,
theta=thetaHat,
alpha = 0.5)
getBStrapCI(
val=resBStrap$Val,
theta=thetaHat,
alpha = 0.5,
jKnife=resJKnife)
getAcceleration <- function(val, mu){
valNew = val - mu
print(valNew)
# numerator
x = valNew^3
x = sum(x)
# denominator
y = valNew^2
y = sum(y)
y = 6 * y^(3/2)
# return result
return(x/y)
} # end func getAcceleration
getBStrapCI(
val=resBStrap$Val,
theta=thetaHat,
alpha = 0.5)
getBStrapCI(
val=resBStrap$Val,
theta=thetaHat,
alpha = 0.5,
jKnife=resJKnife)
library(readxl)
# set work space
workdir <- "C:\\Users\\clint\\Documents\\GitHub\\BlogDataAnalysis"
setwd(file.path(workdir, "Analysis"))
# path for data
filePathData <- file.path(
workdir,
"Data\\StatCompEcology\\Copepod")
RegBeta <- function(x, y){
# Function RegBeta return the coefficient of
# linear regression
# x: independent variable
# y: dependent variable
###################################
# construct Design matrix
X <- as.matrix(cbind(1, x))
# solve by projecting to the solution space
b <- solve(t(X) %*% X) %*% t(X) %*% y
# return the parameters
return(b)
} # end func RegBeta
# read in data from excel file
dat <- read_excel(
file.path(filePathData, "enviANDdensity.xls"),
sheet=1)
#head(dat)
# get the density of fish and copepod
fishDens <- dat$`FishDensity (ind./1000m3)`
cpodDens <- dat$`CopepodDensity ind./m3)`
x <- c(1,2,3)
y <- c(11,12,13)
xy <- c(x,y)
filePathData <- file.path(
workdir,"Data","StatCompEcology","Copepod")
cPodDensity <- read.table(file.path(
filePathData, "cop_density.txt"),
header=T)
cPodCompose <- read.table(file.path(
filePathData, "copepod_composition.txt"),
header=T)
cpodSpecies <- read.delim(file.path(
filePathData, "copepodSPlist.txt"),
header=F)
rownames(cPodCompose) <- cpodSpecies[[1]]
head(cPodCompose)
dat <- cPodCompose / 100
# multiple total density to each row of matrix
res <- apply(
dat, 1,
function(x){x * cPodDensity[,1]})
res <- t(res)
head(res)
dat <- res[
c("Oncaea venusta",
"Canthocalanus pauper"),]
head(dat)
sample(c(1,2,3))
sample(c(1,2,3))
len <- ncol(dat)
seq_len(len)
seq_len(len)
idx + len
len <- ncol(dat)
idx <- seq_len(len)
idx + len
val <- c(dat[1,], dat[2,])
head(val)
?replicate
myFunc <- function(val){
lenMid <- length(val)/2
lenAll <- length(val)
x <- val[seq(     1, lenMid, by=1)]
y <- val[seq(lenMid, lenAll, by=1)]
res <- mean(x) - mean(y)
return(res)
}
myFun(val)
myFun <- function(val){
lenMid <- length(val)/2
lenAll <- length(val)
x <- val[seq(     1, lenMid, by=1)]
y <- val[seq(lenMid, lenAll, by=1)]
res <- mean(x) - mean(y)
return(res)
}
myFun(val)
order(runif(length(val)))
sort(order(runif(length(val))))
```
sort(order(runif(length(val))))
replicate(order(runif(length(val))), 10)
order(runif(length(val)))
val[order(runif(length(val)))]
replicate(1000, myFun(val[order(runif(length(val)))]))
res <- replicate(1000, myFun(val[order(runif(length(val)))]))
hist(res)
resSample  <- myFun(val)
resPermute <- replicate(1000, myFun(val[order(runif(length(val)))]))
mean(resPermute > resSample)
mean(resPermute <r resSample)
mean(resPermute < resSample)
mean(resPermute < -resSample)
resPermute <- replicate(100000, myFun(val[order(runif(length(val)))]))
hist(resPermute,
breaks = seq(
min(resPermute)-1,
max(resPermute)+1,
by=0.01))
hist(resPermute,
breaks = seq(
min(resPermute)-1,
max(resPermute)+1,
by=0.1))
abline(v=resSample)
abline(v=resSample, col="red")
mean(resPermute > resSample)
mean(resPermute < -resSample)

}
mat[1:6, 1:6]
plotMatrix <- function(dat, isXlab=T, isYlab=T){
# given a data (matrix or dataframe), plot the
# value of each element as color
# ---------------------------------
# Set color scale
colPalette.WR <- colorRampPalette(c(
"#fef0d9", "#fdbb84", "#fc8d59", "#e34a33"))(256)
# Flipping the matrix
mat <- as.matrix(dat)
mat <- t(mat)
mat <- mat[,ncol(mat):1,drop=FALSE]
# Plot the matrix
image(mat, xaxt= "n", yaxt= "n",
col = colPalette.WR)
# Show ticks if needed
if(isXlab){ # if X ticks are added
axis(1, at=seq(0,1,length.out=ncol(dat)),
labels=colnames(dat), las=1)
} # end if
if(isYlab){ # if Y ticks are added
axis(2, at=seq(0,1,length.out=nrow(dat)),
labels=rev(rownames(dat)), las=2)
} # end if
} # end func plotMatrix
par(mfrow=c(1,3))
barplot(table(res[1,]) / N,
main="First Student",
ylim=c(0,0.1))
barplot(table(res[2,]) / N,
main="Second Student",
ylim=c(0,0.1))
plotMatrix(res,
xlab="First Student",
ylab="second Student")
plotMatrix(res)
plotMatrix(mat)
title(
main="student selection",
xlab="Second Student",
ylab="First Student")
par(mfrow=c(1,3))
barplot(table(res[1,]) / N,
main="First Student",
ylim=c(0,0.1))
barplot(table(res[2,]) / N,
main="Second Student",
ylim=c(0,0.1))
plotMatrix(mat, isXlab = F, isYlab = F)
title(
main="student selection",
xlab="Second Student",
ylab="First Student")
?par
par(mfrow=c(1,3),
mar=c(5.1,4.1,4.1,2.1))
barplot(table(res[1,]) / N,
main="First Student",
ylim=c(0,0.1))
barplot(table(res[2,]) / N,
main="Second Student",
ylim=c(0,0.1))
plotMatrix(mat, isXlab = F, isYlab = F)
title(
main="student selection",
xlab="Second Student",
ylab="First Student")
par(mfrow=c(1,3),
#mar=c(5.1,4.1,4.1,2.1))
mar=c(7,4.1,4.1,2.1))
barplot(table(res[1,]) / N,
main="First Student",
ylim=c(0,0.1))
barplot(table(res[2,]) / N,
main="Second Student",
ylim=c(0,0.1))
plotMatrix(mat, isXlab = F, isYlab = F)
title(
main="student selection",
xlab="Second Student",
ylab="First Student")
par(mfrow=c(1,3),
#mar=c(5.1,4.1,4.1,2.1))
mar=c(7,4.1,5,2.1))
barplot(table(res[1,]) / N,
main="First Student",
ylim=c(0,0.1))
barplot(table(res[2,]) / N,
main="Second Student",
ylim=c(0,0.1))
plotMatrix(mat, isXlab = F, isYlab = F)
title(
main="student selection",
xlab="Second Student",
ylab="First Student")
par(mfrow=c(1,3),
#mar=c(5.1,4.1,4.1,2.1))
mar=c(7,4.1,7,2.1))
barplot(table(res[1,]) / N,
main="First Student",
ylim=c(0,0.1))
barplot(table(res[2,]) / N,
main="Second Student",
ylim=c(0,0.1))
plotMatrix(mat, isXlab = F, isYlab = F)
title(
main="student selection",
xlab="Second Student",
ylab="First Student")
par(mfrow=c(1,3),
#mar=c(5.1,4.1,4.1,2.1))
mar=c(7,4.1,8,2.1))
barplot(table(res[1,]) / N,
main="First Student",
ylim=c(0,0.1))
barplot(table(res[2,]) / N,
main="Second Student",
ylim=c(0,0.1))
plotMatrix(mat, isXlab = F, isYlab = F)
title(
main="student selection",
xlab="Second Student",
ylab="First Student")
N   <- 100000
ids <- 1:18
res <- replicate(N, Get2NumRand(ids))
mat <- matrix(0, nrow=length(ids), ncol=length(ids))
for (idx in 1:N){
mat[res[1,idx], res[2,idx]] <-
mat[res[1,idx], res[2,idx]] + 1
}
mat[1:6, 1:6]
par(mfrow=c(1,3),
#mar=c(5.1,4.1,4.1,2.1))
mar=c(8,4.1,8,1))
barplot(table(res[1,]) / N,
main="First Student",
ylim=c(0,0.1))
barplot(table(res[2,]) / N,
main="Second Student",
ylim=c(0,0.1))
plotMatrix(mat, isXlab = F, isYlab = F)
title(
main="student selection",
xlab="Second Student",
ylab="First Student")
par(mfrow=c(1,3),
#mar=c(5.1,4.1,4.1,2.1))
mar=c(8,4.1,8,2))
barplot(table(res[1,]) / N,
main="First Student",
ylim=c(0,0.1))
barplot(table(res[2,]) / N,
main="Second Student",
ylim=c(0,0.1))
plotMatrix(mat, isXlab = F, isYlab = F)
title(
main="student selection",
xlab="Second Student",
ylab="First Student")
?hist
# Gaussian Distribution
myGauss <- function(n, mu, sigma2){
x <- rnorm(n)
y <- x * (sigma2^0.5) + mu
return(y)
} # end function myGauss
# Shifting a Gaussian Distribution into desire mu and sigma
myGaussShift <- function(x, mu, sigma2){
# first transform the distribution into standard norm
z <- x / sd(x) - mean(x)
# then shift the distribution into desire one
y <- z * (sigma2^0.5) + mu
return(y)
} # end function myGaussShift
# Uniform Distribution [0,1]
myUnif <- function(n, a=0, b=1) {
x <- runif(n)
y <- x * (b-a) + a
return(y)
} # end func myUnif
# Bernoulli Distribution
myBern  <- function(n, prob=0.5){
res <- ifelse(runif(n) <= prob, 1, 0)
return(res)
} # end func myBern
# Binomial Distribution
myBinom <- function(n, size, prob=0.5){
res <- replicate(n, sum(myBern(size, prob)))
return(res)
} # end func myBinom
plotMatrix <- function(dat, isXlab=T, isYlab=T){
# given a data (matrix or dataframe), plot the
# value of each element as color
# ---------------------------------
# Set color scale
colPalette.WR <- colorRampPalette(c(
"#fef0d9", "#fdbb84", "#fc8d59", "#e34a33"))(256)
# Flipping the matrix
mat <- as.matrix(dat)
mat <- t(mat)
mat <- mat[,ncol(mat):1,drop=FALSE]
# Plot the matrix
image(mat, xaxt= "n", yaxt= "n",
col = colPalette.WR)
# Show ticks if needed
if(isXlab){ # if X ticks are added
axis(1, at=seq(0,1,length.out=ncol(dat)),
labels=colnames(dat), las=1)
} # end if
if(isYlab){ # if Y ticks are added
axis(2, at=seq(0,1,length.out=nrow(dat)),
labels=rev(rownames(dat)), las=2)
} # end if
} # end func plotMatrix
ShiftDistr <- function(x, mu, sigma2){
# first transform the distribution into standard norm
z <- x / sd(x) - mean(x)
# then shift the distribution into desire one
y <- z * (sigma2^0.5) + mu
return(y)
} # end function myGaussShift
N <- 10000
x <- myGauss(N, 0, 1)
y <- ShiftDistr(N, 20, 10)
y <- ShiftDistr(x, 20, 10)
hist(x)
hist(y)
x <- myGauss(N, 0, 1)
y <- ShiftDistr(x, 20, 10)
gp1 <- hist(x, plot=FALSE)
gp2 <- hist(y, plot=FALSE)
plot(gp1, col=rgb(0,0,1,1/4),
xlim=c(-10, 20),
ylim=c(  0, N/3))
plot(gp2, col=rgb(1,0,0,1/4), add=T)
# generate the histogram
gp1 <- hist(x, plot=FALSE)
gp2 <- hist(y, plot=FALSE)
# visualize both histogram in one plot
plot(gp1, col=rgb(0,0,1,1/4),
xlim=c(-10, 50),
ylim=c(  0, N/3))
plot(gp2, col=rgb(1,0,0,1/4), add=T)
# generate the histogram
gp1 <- hist(x, plot=FALSE)
gp2 <- hist(y, plot=FALSE)
# visualize both histogram in one plot
plot(gp1, col=rgb(0,0,1,1/4),
xlim=c(-10, 40),
ylim=c(  0, N/3))
plot(gp2, col=rgb(1,0,0,1/4), add=T)
N <- 10000
x <- myBinom(N, 40)
hist(x, xlim=c(0, 40))
axis(side=1, lwd = 2)
axis(side=2, lwd = 2)
hist(x, col="grey10", xlim=c(0, 40))
axis(side=1, lwd = 2)
axis(side=2, lwd = 2)
hist(x, col="grey80", xlim=c(0, 40))
axis(side=1, lwd = 2)
axis(side=2, lwd = 2)
x <- c(576, 635, 558, 578, 666, 580, 555, 661, 651, 605, 653, 575, 545, 572, 594)
y <- c(3.39, 3.30, 2.81, 3.03, 3.44, 3.07, 3.00, 3.42, 3.36, 3.13, 3.12, 2.74, 2.76, 2.88, 3.96)
x <- c(576, 635, 558, 578, 666, 580, 555, 661, 651, 605, 653, 575, 545, 572, 594)
y <- c(3.39, 3.30, 2.81, 3.03, 3.44, 3.07, 3.00, 3.42, 3.36, 3.13, 3.12, 2.74, 2.76, 2.88, 2.96)
plot(y,x)
plot(y,x, pch=20, xlab="LSAT", ylab="GPA")
plot(x, y, pch=20, xlab="LSAT", ylab="GPA")
seq_along(x)
id <- seq_along(x)
sample(id, replace=TRUE)
CalCor <- function(id, x, y){
xp <- x[id]
yp <- y[id]
p <- cor(xp, yp)
return(p)
} # end func CalCor
id <- seq_along(x)
replicate(10, sample(id, replace=TRUE))
replicate(10, CalCor(sample(id, replace=TRUE),x,y))
corBstrap <- replicate(10, CalCor(sample(id, replace=TRUE),x,y))
corBstrap <- replicate(1000, CalCor(sample(id, replace=TRUE),x,y))
hist(corBstrap)
hist(corBstrap, col="grey10")
hist(corBstrap, col="grey70")
hist(corBstrap, col="grey70", breaks=seq(0, 1, by=0.05))
hist(corBstrap, col="grey70", breaks=seq(0, 1, by=0.01))
hist(corBstrap, col="grey70", breaks=seq(0, 1, by=0.02))
corOri <- cor(x, y)
hist(corBstrap, col="grey70", breaks=seq(0, 1, by=0.02))
hist(corBstrap-corOri, col="grey70", breaks=seq(0, 1, by=0.02))
hist(corBstrap-corOri, col="grey70", breaks=seq(-1, 1, by=0.02))
hist(corBstrap-corOri, col="grey70", breaks=seq(-0.7, 0.7, by=0.02))
hist(corBstrap-corOri, col="grey70", breaks=seq(-0.7, 0.5, by=0.02))
hist(corBstrap-corOri, col="grey70", breaks=seq(-0.7, 0.4, by=0.02))
hist(corBstrap-corOri, col="grey70", breaks=seq(-0.8, 0.5, by=0.02))
hist(corBstrap-corOri, col="grey70", breaks=seq(-0.8, 0.3, by=0.02))
hist(corBstrap-corOri, col="grey70", breaks=seq(-0.8, 0.5, by=0.02))
?vline
?abline
hist(corDiff, col="grey70", breaks=seq(-0.8, 0.5, by=0.02))
corDiff <- corBstrap - corOri
hist(corDiff, col="grey70", breaks=seq(-0.8, 0.5, by=0.02))
abline(a=corBstrap_MU)
corBstrap_MU <- mean(corBstrap)
corBstrap_SE <- sd(corBstrap)
abline(a=corBstrap_MU)
abline(v=corBstrap_MU)
hist(corDiff, col="grey70", breaks=seq(-0.8, 0.5, by=0.02))
abline(v=corBstrap_MU)
abline(v=corBstrap_MU, col="red")
```
abline(hcorBstrap_MU, col="red")
abline(h=corBstrap_MU, col="red")
corOri
print(corOri)
print(corBstrap_MU)
print(corBstrap_SE)
corDiff84 <- sort(cordiff)[840]
corDiff50 <- sort(cordiff)[500]
corDiff <- corBstrap - corOri
corDiff84 <- sort(cordiff)[840]
corDiff84 <- sort(corDiff)[840]
corDiff50 <- sort(corDiff)[500]
corDiff16 <- sort(corDiff)[160]
abline(v=corDiff84, col="red")
abline(v=corDiff50, col="red")
abline(v=corDiff16, col="red")
corDiff <- corBstrap - corOri
corDiff84 <- sort(corDiff)[840]
corDiff50 <- sort(corDiff)[500]
corDiff16 <- sort(corDiff)[160]
hist(corDiff, col="grey70", breaks=seq(-0.8, 0.5, by=0.02))
abline(v=corDiff84, col="red")
abline(v=corDiff50, col="red")
abline(v=corDiff16, col="red")
corDiff <- corBstrap - corOri
corDiff84 <- sort(corDiff)[840]
corDiff50 <- sort(corDiff)[500]
corDiff16 <- sort(corDiff)[160]
##################################
hist(corDiff, col="grey70",
breaks=seq(-0.8, 0.5, by=0.02),
xlab="Difference of bootstrap correlation and the sample correlation")
abline(v=corDiff84, col="red")
abline(v=corDiff50, col="red")
abline(v=corDiff16, col="red")
corDiff <- corBstrap - corOri
corDiff84 <- sort(corDiff)[840]
corDiff50 <- sort(corDiff)[500]
corDiff16 <- sort(corDiff)[160]
##################################
hist(corDiff, col="grey70",
breaks=seq(-0.8, 0.5, by=0.02),
xlab="Difference of bootstrap correlation\nand the sample correlation")
abline(v=corDiff84, col="red")
abline(v=corDiff50, col="red")
abline(v=corDiff16, col="red")
axis(side=1, lwd = 2, labels = seq(-0.8, 0.5, by=0.1))
axis(side=1, lwd = 2, atr = seq(-0.8, 0.5, by=0.1))
axis(side=1, lwd = 2, at = seq(-0.8, 0.5, by=0.1))
axis(side=2, lwd = 2)
corDiff <- corBstrap - corOri
corDiff84 <- sort(corDiff)[840]
corDiff50 <- sort(corDiff)[500]
corDiff16 <- sort(corDiff)[160]
##################################
# plot the histogram
hist(corDiff, col="grey70",
breaks=seq(-0.8, 0.5, by=0.02),
xlab="Difference of bootstrap correlation\nand the sample correlation")
# adding histogram percentiles
abline(v=corDiff84, col="red")
abline(v=corDiff50, col="red")
abline(v=corDiff16, col="red")
# emphasize the axis for visualization
axis(side=1, lwd = 2, at = seq(-0.8, 0.5, by=0.1))
axis(side=2, lwd = 2)
corDiff <- corBstrap - corOri
corDiff84 <- sort(corDiff)[840]
corDiff50 <- sort(corDiff)[500]
corDiff16 <- sort(corDiff)[160]
##################################
# plot the histogram
hist(corDiff, col="grey70",
breaks=seq(-0.8, 0.5, by=0.02),
ylim=c(0,100),
xlab="Difference of bootstrap correlation\nand the sample correlation")
# adding histogram percentiles
abline(v=corDiff84, col="red")
abline(v=corDiff50, col="red")
abline(v=corDiff16, col="red")
# emphasize the axis for visualization
axis(side=1, lwd = 2, at = seq(-0.8, 0.5, by=0.1))
axis(side=2, lwd = 2)
corDiff <- corBstrap - corOri
corDiff84 <- sort(corDiff)[840]
corDiff50 <- sort(corDiff)[500]
corDiff16 <- sort(corDiff)[160]
##################################
# plot the histogram
hist(corDiff, col="grey70",
breaks=seq(-0.8, 0.5, by=0.02),
ylim=c(0,100),
xlab="Difference of bootstrap correlation\nand the sample correlation",
main="Distribution of bootstrapped corr-coef")
# adding histogram percentiles
abline(v=corDiff84, col="red")
abline(v=corDiff50, col="red")
abline(v=corDiff16, col="red")
# emphasize the axis for visualization
axis(side=1, lwd = 2, at = seq(-0.8, 0.5, by=0.1))
axis(side=2, lwd = 2)
corBstrap_MU <- mean(corBstrap)
corBstrap_SE <- sd(corBstrap)
print(corOri)
print(corBstrap_MU)
print(corBstrap_SE)
plot(x, y, pch=20, xlab="LSAT", ylab="GPA")
bootstrap
workdir <- "C:\\Users\\clint\\Documents\\GitHub\\BlogDataAnalysis\\Analysis"
setwd(workdir)
file_path <- "http://www.sthda.com/sthda/RDoc/data/housetasks.txt"
housetasks <- read.delim(file_path, row.names = 1)
head(housetasks)
library("gplots")
dt <- as.table(as.matrix(housetasks))
head(dt)
head(housetasks)
head(dt)
balloonplot(t(dt), main ="housetasks", xlab ="", ylab="",
label = FALSE, show.margins = FALSE)
library("graphics")
mosaicplot(dt, shade = TRUE, las=2,
main = "housetasks")
library("vcd")
assoc(head(dt, 5), shade = TRUE, las=3)
chisq <- chisq.test(housetasks)
chisq
chisq$observed
round(chisq$expected,2)
round(chisq$expected,2)
round(chisq$residuals, 3)
library(corrplot)
corrplot(chisq$residuals, is.cor = FALSE)
corrplot(contrib, is.cor = FALSE)
contrib <- 100*chisq$residuals^2/chisq$statistic
round(contrib, 3)
corrplot(contrib, is.cor = FALSE)
corrplot(contrib, is.cor = FALSE)
chisq$p.value
chisq$estimate
chisq <- chisq.test(housetasks)
chisq$p.value
chisq$estimate
chisq
summary(chisq)
dat <- data.frame(
Wins = c(8.4, 10.4, 11.2),
Draws = c(5.6, 6.9, 7.5),
Losses = c(7.0, 8.7, 89.3))
rownames(dat)
rownames(dat) <- c("Good", "Medium", "Bad")
chi
chi <- chisq.test(dat)
dat
as.table(dat)
class(housetasks)
tbl <- as.table(as.matrix(dat))
chi <- chisq.test(tbl)
chisq <- chisq.test(housetasks)
chisq
class(dat)
class(housetasks)
class(dat)
class(housetasks)
class(dat)
chisq.test(housetasks)
chisq.test(dat)
chi
chi$residuals
chi$residuals^0.5
chi$residuals^2
chi$residuals
chi$observed
chi$expected
chi$observed-chi$expected
chi$expected
chi$statistic
chi$parameter
chi$stdres
dat
dat <- data.frame(
Wins = c(11, 6, 4),
Draws = c(12, 7, 7),
Losses = c(7, 7, 14))
rownames(dat) <- c("Good", "Medium", "Bad")
class(dat)
chisq.test(dat)
chi
chi <- chisq.test(dat)
chi
chi$observed
chi$expected
chi$residuals
chi$residuals^2
sum(chi$residuals^2)
chi$statistic
dt

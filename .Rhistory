# extract gtable
g1 <- ggplot_gtable(ggplot_build(p1))
g2 <- ggplot_gtable(ggplot_build(p2))
# overlap the panel of 2nd plot on that of 1st plot
pp <- c(subset(g1$layout, name == "panel", se = t:r))
g <- gtable_add_grob(g1, g2$grobs[[which(g2$layout$name == "panel")]], pp$t,
pp$l, pp$b, pp$l)
# axis tweaks
ia <- which(g2$layout$name == "axis-l")
ga <- g2$grobs[[ia]]
ax <- ga$children[[2]]
ax$widths <- rev(ax$widths)
ax$grobs <- rev(ax$grobs)
ax$grobs[[1]]$x <- ax$grobs[[1]]$x - unit(1, "npc") + unit(0.15, "cm")
g <- gtable_add_cols(g, g2$widths[g2$layout[ia, ]$l], length(g$widths) - 1)
g <- gtable_add_grob(g, ax, pp$t, length(g$widths) - 1, pp$b)
# draw it
grid.draw(g)
library(ggplot2)
library(gtable)
library(grid)
grid.newpage()
# two plots
p1 <- ggplot(mtcars, aes(mpg, disp)) + geom_line(colour = "blue") + theme_bw()
p2 <- ggplot(mtcars, aes(mpg, drat)) + geom_line(colour = "red") + theme_bw()
%+replace%
theme(panel.background = element_rect(fill = NA))
# extract gtable
g1 <- ggplot_gtable(ggplot_build(p1))
g2 <- ggplot_gtable(ggplot_build(p2))
# overlap the panel of 2nd plot on that of 1st plot
pp <- c(subset(g1$layout, name == "panel", se = t:r))
g <- gtable_add_grob(g1, g2$grobs[[which(g2$layout$name == "panel")]], pp$t,
pp$l, pp$b, pp$l)
# axis tweaks
ia <- which(g2$layout$name == "axis-l")
ga <- g2$grobs[[ia]]
ax <- ga$children[[2]]
ax$widths <- rev(ax$widths)
ax$grobs <- rev(ax$grobs)
ax$grobs[[1]]$x <- ax$grobs[[1]]$x - unit(1, "npc") + unit(0.15, "cm")
g <- gtable_add_cols(g, g2$widths[g2$layout[ia, ]$l], length(g$widths) - 1)
g <- gtable_add_grob(g, ax, pp$t, length(g$widths) - 1, pp$b)
# draw it
grid.draw(g)
g1
subset(g1$layout, name == "panel", se = t:r)
subset(g1$layout, name == "panel")
#' When plotting multiple data series that share a common x axis but different y axes,
#' we can just plot each graph separately. This suffers from the drawback that the shared axis will typically
#' not align across graphs due to different plot margins.
#' One easy solution is to reshape2::melt() the data and use ggplot2's facet_grid() mapping. However, there is
#' no way to label individual y axes.
#' facet_grid() and facet_wrap() were designed to plot small multiples, where both x- and y-axis ranges are
#' shared acros all plots in the facetting. While the facet_ calls allow us to use different scales with
#' the \code{scales = "free"} argument, they should not be used this way.
#' A more robust approach is to the grid package grid.draw(), rbind() and ggplotGrob() to create a grid of
#' individual plots where the plot axes are properly aligned within the grid.
#' Thanks to https://rpubs.com/MarkusLoew/13295 for the grid.arrange() idea.
library(ggplot2)
library(grid)
library(dplyr)
#' Create some data to play with. Two time series with the same timestamp.
df <- data.frame(DateTime = ymd("2010-07-01") + c(0:8760) * hours(2), series1 = rnorm(8761), series2 = rnorm(8761, 100))
#' Create the two plots.
plot1 <- df %>%
select(DateTime, series1) %>%
na.omit() %>%
ggplot() +
geom_point(aes(x = DateTime, y = series1), size = 0.5, alpha = 0.75) +
ylab("Red dots / m") +
theme_minimal() +
theme(axis.title.x = element_blank())
plot2 <- df %>%
select(DateTime, series2) %>%
na.omit() %>%
ggplot() +
geom_point(aes(x = DateTime, y = series2), size = 0.5, alpha = 0.75) +
ylab("Blue drops / L") +
theme_minimal() +
theme(axis.title.x = element_blank())
grid.newpage()
grid.draw(rbind(ggplotGrob(plot1), ggplotGrob(plot2), size = "last"))
df <- data.frame(DateTime = ymd("2010-07-01") + c(0:8760) * hours(2), series1 = rnorm(8761), series2 = rnorm(8761, 100))
library(ggplot2)
library(grid)
library(dplyr)
ymd
library(lubridate)
install.packages("lubridate")
#' When plotting multiple data series that share a common x axis but different y axes,
#' we can just plot each graph separately. This suffers from the drawback that the shared axis will typically
#' not align across graphs due to different plot margins.
#' One easy solution is to reshape2::melt() the data and use ggplot2's facet_grid() mapping. However, there is
#' no way to label individual y axes.
#' facet_grid() and facet_wrap() were designed to plot small multiples, where both x- and y-axis ranges are
#' shared acros all plots in the facetting. While the facet_ calls allow us to use different scales with
#' the \code{scales = "free"} argument, they should not be used this way.
#' A more robust approach is to the grid package grid.draw(), rbind() and ggplotGrob() to create a grid of
#' individual plots where the plot axes are properly aligned within the grid.
#' Thanks to https://rpubs.com/MarkusLoew/13295 for the grid.arrange() idea.
library(ggplot2)
library(grid)
library(dplyr)
library(lubridate)
#install.packages("lubridate")
#' Create some data to play with. Two time series with the same timestamp.
df <- data.frame(DateTime = ymd("2010-07-01") + c(0:8760) * hours(2), series1 = rnorm(8761), series2 = rnorm(8761, 100))
#' Create the two plots.
plot1 <- df %>%
select(DateTime, series1) %>%
na.omit() %>%
ggplot() +
geom_point(aes(x = DateTime, y = series1), size = 0.5, alpha = 0.75) +
ylab("Red dots / m") +
theme_minimal() +
theme(axis.title.x = element_blank())
plot2 <- df %>%
select(DateTime, series2) %>%
na.omit() %>%
ggplot() +
geom_point(aes(x = DateTime, y = series2), size = 0.5, alpha = 0.75) +
ylab("Blue drops / L") +
theme_minimal() +
theme(axis.title.x = element_blank())
grid.newpage()
grid.draw(rbind(ggplotGrob(plot1), ggplotGrob(plot2), size = "last"))
p1 <- ggplot(mtcars, aes(mpg, disp)) + geom_line(colour = "blue") + theme_bw()
p1
p2 <- ggplot(mtcars, aes(mpg, drat)) + geom_line(colour = "red") + theme_bw()
p2
p2 <- p2 + corrd_flip()
p2 <- p2 + coord_flip()
p2
grid.newpage()
grid.draw(rbind(ggplotGrob(p1), ggplotGrob(p2))
)
p1 <- ggplot(mtcars, aes(mpg, disp)) + geom_line(colour = "blue") + theme_bw()
p2 <- ggplot(mtcars, aes(mpg, drat)) + geom_line(colour = "red") + theme_bw()
grid.newpage()
grid.draw(rbind(ggplotGrob(p1), ggplotGrob(p2)))
grid.draw(rbind(ggplotGrob(p1), ggplotGrob(p2)), size = "last")
grid.draw(rbind(ggplotGrob(p1), ggplotGrob(p2), size = "last"))
p2 + scale_y_reverse()
p2 + scale_y_continuous(sec.axis = dup_axis())
p2 + scale_y_continuous(position = "right")
grid.draw(rbind(ggplotGrob(p1), ggplotGrob(p2), size = "last"))
p22 <- p2 + scale_y_continuous(position = "right")
grid.newpage()
grid.draw(rbind(ggplotGrob(p1), ggplotGrob(p22), size = "last"))
library(knitr)
kable(data.frame(x=rnorm(5),y=rnorm(5)))
A <- c(1,5,6,7,9)
B <- c(10,56,64,86,98)
C <- c(2001,3333,5678,4345,5345)
D <- c(13446,20336,24333,34345,42345)
L <- c(20,34,45,55,67)
M <- data.frame(L, A, B, C, D)
library(ggplot2)
x1 <- ggplot(M, aes(L, A,xmin=10,ymin=0)) + geom_point() + stat_smooth(method='lm')
x2 <- ggplot(M, aes(L, B,xmin=10,ymin=0)) + geom_point() + stat_smooth(method='lm')
x3 <- ggplot(M, aes(L, C,xmin=10,ymin=0)) + geom_point() + stat_smooth(method='lm')
x4 <- ggplot(M, aes(L, D,xmin=10,ymin=0)) + geom_point() + stat_smooth(method='lm')
grid.arrange(x1,x2,x3,x4,nrow=2)
x4
install.packages("gtable")
install.packages("gtable")
install.packages("gtable")
install.packages("gtable")
install.packages("gtable")
install.packages("gtable")
library(gtable)
plots <- list(a,b,c,d)
grobs = lapply(plots, ggplotGrob)
grid.arrange(x1,x2,x3,x4,nrow=2)
library(gtable)
A <- c(1,5,6,7,9)
B <- c(10,56,64,86,98)
C <- c(2001,3333,5678,4345,5345)
D <- c(13446,20336,24333,34345,42345)
L <- c(20,34,45,55,67)
M <- data.frame(L, A, B, C, D)
library(ggplot2)
x1 <- ggplot(M, aes(L, A,xmin=10,ymin=0)) + geom_point() + stat_smooth(method='lm')
x2 <- ggplot(M, aes(L, B,xmin=10,ymin=0)) + geom_point() + stat_smooth(method='lm')
x3 <- ggplot(M, aes(L, C,xmin=10,ymin=0)) + geom_point() + stat_smooth(method='lm')
x4 <- ggplot(M, aes(L, D,xmin=10,ymin=0)) + geom_point() + stat_smooth(method='lm')
grid.arrange(x1,x2,x3,x4,nrow=2)
library(gridExtra)
grid.arrange(x1,x2,x3,x4,nrow=2)
grid.arrange(x1,x2,x3,x4,nrow=2, width=2)
grid.arrange(x1,x2,x3,x4,nrow=2, width=(2,2,2,2))
grid.arrange(x1,x2,x3,x4,nrow=2, width=c(2,2,2,2))
grid.arrange(x1,x2,x3,x4,nrow=2, widths=c(2,2,2,2))
library(grid)
grid.draw
x <- cbind(
rbind(ggplotGrob(x1), ggplotGrob(x2)),
rbind(ggplotGrob(x3), ggplotGrob(x4)))
grid.draw(x, size = "last"))
grid.draw(x, size = "last")
grid.draw(x)
x1 <- ggplot(M, aes(L, A,xmin=10,ymin=0)) + geom_point() + stat_smooth(method='lm')
x2 <- ggplot(M, aes(L, B,xmin=0,ymin=0)) + geom_point() + stat_smooth(method='lm')
x3 <- ggplot(M, aes(L, C,xmin=10,ymin=0)) + geom_point() + stat_smooth(method='lm')
x4 <- ggplot(M, aes(L, D,xmin=0,ymin=0)) + geom_point() + stat_smooth(method='lm')
x <- cbind(
rbind(ggplotGrob(x1), ggplotGrob(x2)),
rbind(ggplotGrob(x3), ggplotGrob(x4)))
grid.draw(x)
x1 <- ggplot(M, aes(L, A,xmin=10,ymin=0)) + geom_point() + stat_smooth(method='lm')
x2 <- ggplot(M, aes(L, B,xmin=10,ymin=0)) + geom_point() + stat_smooth(method='lm')
x3 <- ggplot(M, aes(L, C,xmin=0,ymin=0)) + geom_point() + stat_smooth(method='lm')
x4 <- ggplot(M, aes(L, D,xmin=0,ymin=0)) + geom_point() + stat_smooth(method='lm')
x <- cbind(
rbind(ggplotGrob(x1), ggplotGrob(x2)),
rbind(ggplotGrob(x3), ggplotGrob(x4)))
library(grid)
grid.draw(x)
library(ComplexHeatmap)
library(knitr)
workdir <- "C:\\Users\\clint\\Documents\\GitHub\\BlogDataAnalysis"
setwd(workdir)
filePathData <- file.path(
workdir,
"Data/StatCompEcology/Copepod")
# intialize a list to store data
datCPOD <- list()
# read tables: number of copepod in each station
# 34 stations
dat <- read.table(file.path(
filePathData, "cop_density.txt"),
header=T)
datCPOD$Density <- dat
# read tables: freq of copepod in each station
# 34 stations x 181 species
dat <- read.table(file.path(
filePathData, "copepod_composition.txt"),
header=T)
datCPOD$Compose <- dat
# read tables: species name
# 181 species
dat <- read.table(file.path(
filePathData, "copepodSPlist.txt"),
sep="\t", header=F)
datCPOD$SP_Total <- as.character(dat$V1)
# Search for dominant species
dat <- datCPOD$Compose
temp <- apply(dat >= 2, 1, sum)
datCPOD$SP_Dominant <- which(temp > 0)
# Extract the composition of dominant species
dat <- datCPOD$Compose
idx <- datCPOD$SP_Dominant
idn <- datCPOD$SP_Total
dat <- dat[idx,]
rownames(dat) <- idn[idx]
# composition of dominant species
# Note: transform the matrix since
# we are clustering on stations
datCPOD$CompDmt <- t(dat)
datCPOD$CompDmtScale <- scale(t(dat)) # scales the columns of a numeric matrix
#head(datCPOD$CompDmtScale)
# Original data matrix of dominant species in different stations
dat <- datCPOD$CompDmt
ht1 <- Heatmap(
dat, column_title = "Before scaled...",
row_names_gp = gpar(fontsize = 10),
column_names_max_height=unit(15, "cm"),
column_names_gp = gpar(fontsize = 10),
cluster_rows=F, cluster_columns=F)
# Scaled data matrix of dominant species in different stations
dat <- datCPOD$CompDmtScale
ht2 <- Heatmap(
dat, column_title = "After scaled...",
row_names_gp = gpar(fontsize = 10),
column_names_max_height=unit(15, "cm"),
column_names_gp = gpar(fontsize = 10),
cluster_rows=F, cluster_columns=F)
# plot
draw(ht1 + ht2,
column_title = "Compare the data before/after scaled",
column_title_side = "bottom")
datENV <- read.table(file.path(filePathData,"enviANDdensity.txt"))
View(datENV)
datENV <- read.table(file.path(
filePathData,
"enviANDdensity.txt"),
header=T)
View(datENV)
View(dat)
View(dat)
library(dplyr)
library(tidyr)
View(datCPOD$Compose)
dat$station <- rownames(dat)
dat <- datCPOD$CompDmtScale
dat$station <- rownames(dat)
dat <- datCPOD$CompDmtScale
View(dat)
dat <- as.data.frame(datCPOD$CompDmtScale)
View(dat)
View(datENV)
dat <- datCPOD$CompDmtScale
rownames(dat)
datENV$station
datENV <- read.table(file.path(
filePathData,
"enviANDdensity.txt"),
header=T,
stringsAsFactors = FALSE)
datENV$station
rownames(dat) == datENV$station
rownames(dat)
datENV$station
dat <- datCPOD$CompDmtScale
rownames(dat) == datENV$station
dat <- cbind(dat, datENV)
View(dat)
dat <- cbind(dat, datENV[,-1])
View(dat)
dat <- datCPOD$CompDmtScale
datENV$station
rownames(dat)
datENV$station
rownames(datCPOD$CompDmtScale)
dat <- datCPOD$CompDmtScale
dat <- cbind(dat, datENV[,-1])
View(dat)
library(vegan)
head()
head(datENV[,-1])
resRDA <- rda(dat1~., dat2)
dat1 <- datCPOD$CompDmtScale
dat2 <- datENV[,-1]
resRDA <- rda(dat1~., dat2)
resRDA
summary(resRDA)
print(resRDA)
plot(resRDA)
plot(resRDA, display="lc")
plot(resRDA, display="wa")
# set plot
par(mfrow=c(1,2))
# plot
plot(resRDA, display="lc")
plot(resRDA, display="wa")
# reset plot
par(mfrow=c(1,1))
# set plot
par(mfrow=c(1,2))
# plot
plot(resRDA, display="lc", main="LC scores")
plot(resRDA, display="wa", main="WA scores")
# reset plot
par(mfrow=c(1,1))
spenvcor(resRDA)
plot(mm, dis=c("wa","lc"))
plot(resRDA, dis=c("wa","lc"))
x <- cor(iris[1:4])
corrplot(x, type="upper")
library(corrplot)
corrplot(x, type="upper")
colnames(x)
?scores
scores(resRDA, display="WA")
scoreWA <- scores(resRDA, display="wa")
scoreWA
scoreLC <- scores(resRDA, display="lc")
scoreLC
print(resRDA)
dim(dat1)
scoreLC <- scores(resRDA, display="lc", choice=c(1:11))
scoreWA <- scores(resRDA, display="wa", choice=c(1:22))
scoreWA <- scores(resRDA, display="wa", choice=c(1:25))
scoreLC <- scores(resRDA, display="lc", choice=c(1:5))
scoreWA <- scores(resRDA, display="wa", choice=c(1:5))
mat <- cov(scoreLC, scoreWA)
Heatmap(mat)
mat
scoreLC <- scores(resRDA, display="lc", choice=c(1:5))
scoreWA <- scores(resRDA, display="wa", choice=c(1:5))
mat <- cor(scoreLC, scoreWA)
Heatmap(mat)
scoreLC <- scores(resRDA, display="lc", choice=c(1:5))
scoreWA <- scores(resRDA, display="wa", choice=c(1:5))
mat <- cor(scoreLC, scoreWA)
Heatmap(
mat,
row_names_gp = gpar(fontsize = 10),
column_names_max_height=unit(15, "cm"),
column_names_gp = gpar(fontsize = 10),
cluster_rows=F, cluster_columns=F)
mat
scoreLC <- scores(resRDA, display="lc", choice=c(1:5))
scoreWA <- scores(resRDA, display="wa", choice=c(1:5))
mat <- cor(scoreLC, scoreWA)
Heatmap(
mat,
row_names_gp = gpar(fontsize = 15),
column_names_max_height=unit(15, "cm"),
column_names_gp = gpar(fontsize = 15),
cluster_rows=F, cluster_columns=F)
spenvcor(resRDA)
biplot(resRDA)
ordiplot(resRDA)
ordiplot(resRDA, type="text")
ordiplot(resRDA, type="text", scaling=3)
View(datENV)
View(datENV)
colnames(datENV)
read.table(file.path(
filePathData,
"enviANDdensity.xls"),
header=T,
stringsAsFactors = FALSE)
datEnvBio  <- datENV[, 2:10]
datEnvPhys <- datENV[,11:12]
dat <- datCPOD$CompDmtScale
datEnvBio  <- datENV[, 2:10]
datEnvPhys <- datENV[,11:12]
dat1 <- datCPOD$CompDmtScale
dat2 <- datENV[,-1]
resCCA <- cca(dat1~., dat2)
dat1 <- datCPOD$CompDmtScale
dat2 <- datENV[,-1]
resCCA <- cca(dat1~., dat2)
View(dat)
dat1 <- datCPOD$CompDmtScale
dat2 <- datENV[,-1]
resCCA <- cca(dat1~., dat2)
resCCA <- cca(dat1)
dat1 <- datCPOD$CompDmt
dat2 <- datENV[,-1]
resCCA <- cca(dat1~., dat2)
print(resCCA)
plot(resCCA, scaling=3)
plot(resCCA, scaling=3,
xlim=c(-4,4),
ylim=c(-2,2))
dat <- datCPOD$CompDmtScale
datEnv     <- datENV[, -1]
datEnvBio  <- datENV[, 2:10]
datEnvPhys <- datENV[,11:12]
?rda
idn <- names(datEnv.env)
idn <- names(datEnv)
idn
idn <- names(datENV)
idn
paste("dat ~",
paste(nams[2:10], collapse = " + ")
)
paste("dat ~",
paste(idn[2:10], collapse = " + ")
)
paste(idn[2:10], collapse = " + ")
"+ Condition(", paste(nams[4:5], collapse = " + "), ")")
paste(nams[4:5], collapse = " + ")
paste("dat ~",
paste(idn[ 2:10], collapse = " + "),
"+ Condition(",
paste(idn[11:12], collapse = " + "),
")")
paste("dat ~", paste(idn[ 2:10], collapse = " + "))
idn <- names(datENV)
idnPhys <- idn[2:10]
idnBio  <- idn[11:12]
formula(paste("dat ~", paste(idnPhys, collapse = " + ")))
dat <- datCPOD$CompDmtScale
datEnv     <- datENV[, -1]
# set factors
idn <- names(datENV)
idnPhys <- idn[2:10]
idnBio  <- idn[11:12]
# biological factors
formP <- formula(paste("dat ~", paste(idnPhys, collapse = " + ")))
# physical factors
formB <- formula(paste("dat ~", paste(idnBio , collapse = " + ")))
# biological factors condition on physical factors
formPB <- formula(
paste("dat ~",
paste(idnPhys, collapse = " + "),
"+ Condition(",
paste(idnBio, collapse = " + "),
")"))
# physical factors condition on biological factors
formBP <- formula(
paste("dat ~",
paste(idnBio, collapse = " + "),
"+ Condition(",
paste(idnPhys, collapse = " + "),
")"))
resRDA <- list()
resRDA$Tot  <- rda(dat~., datEnv)
resRDA$Phys <- rda(formP, datEnv)
resRDA$Bio  <- rda(formB, datEnv)
resRDA$PB   <- rda(formPB, datEnv)
resRDA$BP   <- rda(formBP, datEnv)
biplot(resRDA$Tot)
ordiplot(resRDA$Tot,  type="text", scaling=3)
ordiplot(resRDA$Phys, type="text", scaling=3)
ordiplot(resRDA$Bio,  type="text", scaling=3)
ordiplot(resRDA$PB,   type="text", scaling=3)
ordiplot(resRDA$Tot,  type="text", scaling=3, main="Total")
ordiplot(resRDA$Phys, type="text", scaling=3,
main="Physical Factors")
ordiplot(resRDA$PB,   type="text", scaling=3,
main="Physical Factors Condition on Biological Factors")
ordiplot(resRDA$Bio,  type="text", scaling=3,
main="Biological Factors")
ordiplot(resRDA$BP,   type="text", scaling=3,
main="Biological Factors Condition on Physical Factors")
